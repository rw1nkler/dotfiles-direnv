##############################################################################
###                                 conda                                  ###
##############################################################################

layout_conda() {
    DIRENV_DIR=${PWD}/.direnv

    if [ -n "$1" ]; then
        ENVIRONMENT_YML=`realpath $1`
    elif [ -f "environment.yml" ]; then
        ENVIRONMENT_YML="environment.yml"
    else
        ENVIRONMENT_YML=""
    fi

    if [ "${ENVIRONMENT_YML}" != "" ]; then
        ENV_NAME=`grep name: ${ENVIRONMENT_YML} | sed -e 's/name: //' | cut -d "'" -f 2 | cut -d '"' -f 2`
    else
        ENV_NAME="conda-env"
    fi

    CONDA_DIR=${DIRENV_DIR}/conda/${ENV_NAME}
    if [[ ! -d ${CONDA_DIR} ]]; then
        log_status "Conda environment not found!"

        mkdir -p ${DIRENV_DIR}
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ${DIRENV_DIR}/conda_installer.sh
        bash ${DIRENV_DIR}/conda_installer.sh -b -p ${CONDA_DIR}
        rm ${DIRENV_DIR}/conda_installer.sh
        source "${CONDA_DIR}/etc/profile.d/conda.sh"
        conda update -q conda

        if [ "$ENVIRONMENT_YML" != "" ]; then
            conda env create -f ${ENVIRONMENT_YML}
        else
            conda create --name ${ENV_NAME}
        fi
    fi

    source "${CONDA_DIR}/etc/profile.d/conda.sh"
    conda activate ${ENV_NAME}
}

##############################################################################
###                                 venv                                   ###
##############################################################################

realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

layout_python-venv() {
    local python=${1:-python3}
    [[ $# -gt 0 ]] && shift
    unset PYTHONHOME
    if [[ -n $VIRTUAL_ENV ]]; then
        VIRTUAL_ENV=$(realpath "${VIRTUAL_ENV}")
    else
        local python_version
        python_version=$("$python" -c "import platform; print(platform.python_version())")
        local _ENV_NAME=${ENV_NAME:-python-venv-$python_version}
        if [[ -z $python_version ]]; then
            log_error "Could not detect Python version"
            return 1
        fi
        VIRTUAL_ENV=$PWD/.direnv/$_ENV_NAME
    fi
    export VIRTUAL_ENV
    if [[ ! -d $VIRTUAL_ENV ]]; then
        log_status "no venv found; creating $VIRTUAL_ENV"
        "$python" -m venv "$VIRTUAL_ENV"
    fi
    PATH_add "$VIRTUAL_ENV/bin"
}

##############################################################################
###                             add_gitignore                              ###
##############################################################################

add_gitignore() {
    if [ -n "$1" ] && [ -n "$2" ]; then
        LOCAL_IGNORE_FILE="$1"
        IGNORES="$2"
    elif [ -n "$1" ]; then
        LOCAL_IGNORE_FILE=.git/info/exclude
        IGNORES="$1"
    fi

    if [ -f "${LOCAL_IGNORE_FILE}" ]; then
        echo "${IGNORES}" | tr " " "\n" > ${LOCAL_IGNORE_FILE}
    else
        log status "<dir>/.git/info/.exclude not found"
    fi
}

##############################################################################
###                              export_alias                              ###
##############################################################################

export_alias() {
  local name=$1
  shift
  local alias_dir=$PWD/.direnv/aliases
  local target="$alias_dir/$name"
  mkdir -p "$alias_dir"
  PATH_add "$alias_dir"
  echo "#!/usr/bin/env bash" > "$target"
  echo "$@" >> "$target"
  chmod +x "$target"
}
